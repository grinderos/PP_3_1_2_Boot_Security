SELECT * FROM security_user.users;
SELECT * FROM security_user.user_role;
SELECT * FROM security_user.roles;


delete from security_user.users where id=2;
delete from security_user.user_role where user_id=2;

truncate table security_user.users;
truncate table security_user.user_role;


create table if not exists security_user.users (
id bigint primary key auto_increment,
    username varchar(40) not null unique,
    age int not null,
    login_password varchar(100) not null
);

create table if not exists security_user.roles (
id int primary key auto_increment,
name varchar(20) unique not null
);

create table if not exists security_user.user_role (
user_id bigint not null,
role_id int not null,
primary key (user_id, role_id),
foreign key (user_id) references security_user.users (id),
foreign key (role_id) references security_user.roles (id)
);

INSERT INTO security_user.users (username, age, login_password)
VALUES 	('admin', 30, 'admin'),
		('user', 20, 'user');

INSERT INTO security_user.roles (user_role) values ('ROLE_ADMIN'), ('ROLE_USER');

INSERT INTO security_user.user_role (user_id, role_id)
VALUES 	(1, 1),
        (1, 2),
		(2, 2);

INSERT INTO security_user.user_role (user_id, role_id)
    VALUES ((SELECT id FROM users WHERE username ='admin'),
           (SELECT id FROM roles WHERE user_role ='ROLE_ADMIN'));

INSERT INTO security_user.user_role (user_id, role_id)
    VALUES ((SELECT id FROM security_user.users WHERE username ='user'),
           (SELECT id FROM security_user.roles WHERE user_role ='ROLE_USER'));


set foreign_key_checks = 0;
drop table security_user.roles;
drop table security_user.users;
drop table security_user.user_role;
set foreign_key_checks = 1;
